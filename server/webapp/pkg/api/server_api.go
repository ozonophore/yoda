// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gorilla/mux"
)

// Defines values for WeekDay.
const (
	Friday    WeekDay = "friday"
	Monday    WeekDay = "monday"
	Saturday  WeekDay = "saturday"
	Sunday    WeekDay = "sunday"
	Thursday  WeekDay = "thursday"
	Tuesday   WeekDay = "tuesday"
	Wednesday WeekDay = "wednesday"
)

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// Job defines model for Job.
type Job struct {
	AddLoader      JobAddLoader `json:"addLoader"`
	CalcAggregates JobLoader    `json:"calcAggregates"`
	Id             int64        `json:"id"`
	Loader         JobLoader    `json:"loader"`
}

// JobAddLoader defines model for JobAddLoader.
type JobAddLoader struct {
	Interval *int `json:"interval,omitempty"`
	MaxRuns  *int `json:"maxRuns,omitempty"`
}

// JobLoader defines model for JobLoader.
type JobLoader struct {
	AtTimes  []string   `json:"atTimes"`
	LastRun  *time.Time `json:"lastRun,omitempty"`
	NextRun  *time.Time `json:"nextRun,omitempty"`
	WeekDays []WeekDay  `json:"weekDays"`
}

// NewRoom defines model for NewRoom.
type NewRoom struct {
	Code string `json:"code"`
	Name string `json:"name"`
	Ozon Ozon   `json:"ozon"`
	Wb   Wb     `json:"wb"`
}

// Ozon defines model for Ozon.
type Ozon struct {
	ApiKey   string `json:"apiKey"`
	ClientId string `json:"clientId"`
}

// Room defines model for Room.
type Room struct {
	Code      string     `json:"code"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Days      []WeekDay  `json:"days"`
	Name      string     `json:"name"`
	Ozon      Ozon       `json:"ozon"`
	Times     []string   `json:"times"`
	Wb        Wb         `json:"wb"`
}

// Wb defines model for Wb.
type Wb struct {
	AuthToken string `json:"authToken"`
}

// WeekDay defines model for WeekDay.
type WeekDay string

// CreateRoomJSONRequestBody defines body for CreateRoom for application/json ContentType.
type CreateRoomJSONRequestBody = NewRoom

// UpdateRoomJSONRequestBody defines body for UpdateRoom for application/json ContentType.
type UpdateRoomJSONRequestBody = Room

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all jobs
	// (GET /jobs)
	GetJobs(w http.ResponseWriter, r *http.Request)
	// Get job by id
	// (GET /jobs/{id})
	GetJobById(w http.ResponseWriter, r *http.Request, id int64)
	// Run job by id
	// (POST /jobs/{id}/run)
	RunJobById(w http.ResponseWriter, r *http.Request, id int64)
	// Stop job by id
	// (POST /jobs/{id}/stop)
	StopJobById(w http.ResponseWriter, r *http.Request, id int64)
	// Get all rooms
	// (GET /rooms)
	GetRooms(w http.ResponseWriter, r *http.Request)
	// Create room
	// (POST /rooms)
	CreateRoom(w http.ResponseWriter, r *http.Request)
	// Update room
	// (PUT /rooms)
	UpdateRoom(w http.ResponseWriter, r *http.Request)
	// Get room by id
	// (GET /rooms/{code})
	GetRoomById(w http.ResponseWriter, r *http.Request, code string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetJobs operation middleware
func (siw *ServerInterfaceWrapper) GetJobs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJobs(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetJobById operation middleware
func (siw *ServerInterfaceWrapper) GetJobById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJobById(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RunJobById operation middleware
func (siw *ServerInterfaceWrapper) RunJobById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RunJobById(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// StopJobById operation middleware
func (siw *ServerInterfaceWrapper) StopJobById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StopJobById(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetRooms operation middleware
func (siw *ServerInterfaceWrapper) GetRooms(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRooms(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateRoom operation middleware
func (siw *ServerInterfaceWrapper) CreateRoom(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRoom(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateRoom operation middleware
func (siw *ServerInterfaceWrapper) UpdateRoom(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateRoom(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetRoomById operation middleware
func (siw *ServerInterfaceWrapper) GetRoomById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameter("simple", false, "code", mux.Vars(r)["code"], &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRoomById(w, r, code)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/jobs", wrapper.GetJobs).Methods("GET")

	r.HandleFunc(options.BaseURL+"/jobs/{id}", wrapper.GetJobById).Methods("GET")

	r.HandleFunc(options.BaseURL+"/jobs/{id}/run", wrapper.RunJobById).Methods("POST")

	r.HandleFunc(options.BaseURL+"/jobs/{id}/stop", wrapper.StopJobById).Methods("POST")

	r.HandleFunc(options.BaseURL+"/rooms", wrapper.GetRooms).Methods("GET")

	r.HandleFunc(options.BaseURL+"/rooms", wrapper.CreateRoom).Methods("POST")

	r.HandleFunc(options.BaseURL+"/rooms", wrapper.UpdateRoom).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/rooms/{code}", wrapper.GetRoomById).Methods("GET")

	return r
}
