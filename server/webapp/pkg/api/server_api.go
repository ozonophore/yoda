// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gorilla/mux"
)

// Defines values for WeekDay.
const (
	Friday    WeekDay = "friday"
	Monday    WeekDay = "monday"
	Saturday  WeekDay = "saturday"
	Sunday    WeekDay = "sunday"
	Thursday  WeekDay = "thursday"
	Tuesday   WeekDay = "tuesday"
	Wednesday WeekDay = "wednesday"
)

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// Job defines model for Job.
type Job struct {
	AddLoader      JobAddLoader `json:"addLoader"`
	CalcAggregates JobLoader    `json:"calcAggregates"`
	Id             int64        `json:"id"`
	Loader         JobLoader    `json:"loader"`
}

// JobAddLoader defines model for JobAddLoader.
type JobAddLoader struct {
	Interval *int `json:"interval,omitempty"`
	MaxRuns  *int `json:"maxRuns,omitempty"`
}

// JobLoader defines model for JobLoader.
type JobLoader struct {
	AtTimes  []string   `json:"atTimes"`
	LastRun  *time.Time `json:"lastRun,omitempty"`
	NextRun  *time.Time `json:"nextRun,omitempty"`
	WeekDays []WeekDay  `json:"weekDays"`
}

// NewRoom defines model for NewRoom.
type NewRoom struct {
	Code string `json:"code"`
	Name string `json:"name"`
	Ozon Ozon   `json:"ozon"`
	Wb   Wb     `json:"wb"`
}

// OrderItem defines model for OrderItem.
type OrderItem struct {
	// Article Article of the item
	Article string `json:"article"`

	// Barcode Barcode of the item
	Barcode   string    `json:"barcode"`
	CreatedAt time.Time `json:"createdAt"`

	// Id Unique identifier
	Id int `json:"id"`

	// Marketplace Marketplace name
	Marketplace string `json:"marketplace"`

	// Name Name of the item
	Name string `json:"name"`

	// Organization Organization name
	Organization string `json:"organization"`

	// Price Price of the item
	Price float64 `json:"price"`

	// PriceWithDiscount Price with discount of the item
	PriceWithDiscount float64 `json:"priceWithDiscount"`

	// Quantity Quantity of the item
	Quantity int `json:"quantity"`

	// QuantityFull Quantity of the item
	QuantityFull int `json:"quantityFull"`

	// Status Status of the item
	Status string `json:"status"`

	// TransactionDate Transaction date
	TransactionDate time.Time `json:"transactionDate"`

	// Warehouse Warehouse name
	Warehouse string `json:"warehouse"`
}

// OrderItems defines model for OrderItems.
type OrderItems struct {
	Items []OrderItem `json:"items"`

	// Limit Limit of items per page
	Limit int `json:"limit"`

	// Offset Offset of the last item in the list
	Offset int `json:"offset"`

	// Total Total number of items
	Total int `json:"total"`
}

// Ozon defines model for Ozon.
type Ozon struct {
	ApiKey   string `json:"apiKey"`
	ClientId string `json:"clientId"`
}

// Room defines model for Room.
type Room struct {
	Code      string     `json:"code"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Days      []WeekDay  `json:"days"`
	Name      string     `json:"name"`
	Ozon      Ozon       `json:"ozon"`
	Times     []string   `json:"times"`
	Wb        Wb         `json:"wb"`
}

// SalesForWeek defines model for SalesForWeek.
type SalesForWeek struct {
	Items *[]SalesForWeekItem `json:"items,omitempty"`

	// UpdateAt Update date
	UpdateAt *time.Time `json:"updateAt,omitempty"`
}

// SalesForWeekItem defines model for SalesForWeekItem.
type SalesForWeekItem struct {
	// OrderDate Week number
	OrderDate time.Time `json:"orderDate"`
	Price     float64   `json:"price"`
}

// StockInfoItem defines model for StockInfoItem.
type StockInfoItem struct {
	// StockDate Stock date
	StockDate time.Time `json:"stockDate"`

	// Total Total number of items
	Total int `json:"total"`

	// ZeroQty Total number of items with zero quantity
	ZeroQty int `json:"zeroQty"`
}

// StockItem defines model for StockItem.
type StockItem struct {
	// Article Article of the item
	Article string `json:"article"`

	// Barcode Barcode of the item
	Barcode   string    `json:"barcode"`
	CreatedAt time.Time `json:"createdAt"`

	// Id Unique identifier
	Id int64 `json:"id"`

	// Marketplace Marketplace name
	Marketplace string `json:"marketplace"`

	// Name Name of the item
	Name string `json:"name"`

	// Organization Organization name
	Organization string `json:"organization"`

	// Quantity Quantity of the item
	Quantity int `json:"quantity"`

	// QuantityFull Quantity of the item
	QuantityFull int       `json:"quantityFull"`
	UpdatedAt    time.Time `json:"updatedAt"`

	// Warehouse Warehouse name
	Warehouse string `json:"warehouse"`
}

// StockItems defines model for StockItems.
type StockItems struct {
	Items []StockItem `json:"items"`

	// Limit Limit of items per page
	Limit int `json:"limit"`

	// Offset Offset of the last item in the list
	Offset int `json:"offset"`

	// Total Total number of items
	Total int `json:"total"`
}

// TaskInfo defines model for TaskInfo.
type TaskInfo struct {
	// Canceled Total number of canceled tasks
	Canceled int `json:"canceled"`

	// Completed Total number of completed tasks
	Completed int             `json:"completed"`
	Items     *[]TaskInfoItem `json:"items,omitempty"`
}

// TaskInfoItem defines model for TaskInfoItem.
type TaskInfoItem struct {
	// EndDate End date
	EndDate *string `json:"endDate,omitempty"`

	// Id Unique identifier
	Id int64 `json:"id"`

	// Message Message of the task
	Message *string `json:"message,omitempty"`

	// StartDate Start date
	StartDate string `json:"startDate"`

	// Status Status of the task
	Status string `json:"status"`
}

// TaskRun defines model for TaskRun.
type TaskRun struct {
	// Result Result of the task
	Result *bool `json:"result,omitempty"`
}

// TransactionsInfo defines model for TransactionsInfo.
type TransactionsInfo struct {
	// LastEnd Last end date
	LastEnd *time.Time `json:"lastEnd,omitempty"`

	// LastStart Last start date
	LastStart *time.Time `json:"lastStart,omitempty"`

	// Success Total number of items
	Success int `json:"success"`

	// Total Total number of items
	Total int `json:"total"`
}

// Wb defines model for Wb.
type Wb struct {
	AuthToken string `json:"authToken"`
}

// WeekDay defines model for WeekDay.
type WeekDay string

// GetOrdersParams defines parameters for GetOrders.
type GetOrdersParams struct {
	Limit  int       `form:"limit" json:"limit"`
	Offset int       `form:"offset" json:"offset"`
	Date   time.Time `form:"date" json:"date"`
	Search *string   `form:"search,omitempty" json:"search,omitempty"`
}

// GetStocksParams defines parameters for GetStocks.
type GetStocksParams struct {
	Limit  int       `form:"limit" json:"limit"`
	Offset int       `form:"offset" json:"offset"`
	Date   time.Time `form:"date" json:"date"`
	Search *string   `form:"search,omitempty" json:"search,omitempty"`
}

// CreateRoomJSONRequestBody defines body for CreateRoom for application/json ContentType.
type CreateRoomJSONRequestBody = NewRoom

// UpdateRoomJSONRequestBody defines body for UpdateRoom for application/json ContentType.
type UpdateRoomJSONRequestBody = Room

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all jobs
	// (GET /jobs)
	GetJobs(w http.ResponseWriter, r *http.Request)
	// Get job by id
	// (GET /jobs/{id})
	GetJobById(w http.ResponseWriter, r *http.Request, id int64)
	// Run job by id
	// (POST /jobs/{id}/run)
	RunJobById(w http.ResponseWriter, r *http.Request, id int64)
	// Stop job by id
	// (POST /jobs/{id}/stop)
	StopJobById(w http.ResponseWriter, r *http.Request, id int64)
	// Get all orders
	// (GET /orders)
	GetOrders(w http.ResponseWriter, r *http.Request, params GetOrdersParams)
	// Ping
	// (GET /ping)
	Ping(w http.ResponseWriter, r *http.Request)
	// Get all rooms
	// (GET /rooms)
	GetRooms(w http.ResponseWriter, r *http.Request)
	// Create room
	// (POST /rooms)
	CreateRoom(w http.ResponseWriter, r *http.Request)
	// Update room
	// (PUT /rooms)
	UpdateRoom(w http.ResponseWriter, r *http.Request)
	// Get room by id
	// (GET /rooms/{code})
	GetRoomById(w http.ResponseWriter, r *http.Request, code string)
	// Get sales for week
	// (GET /sales/week)
	GetSalesForWeek(w http.ResponseWriter, r *http.Request)
	// Get all stocks
	// (GET /stocks)
	GetStocks(w http.ResponseWriter, r *http.Request, params GetStocksParams)
	// Get stocks info
	// (GET /stocks/info)
	GetStocksInfo(w http.ResponseWriter, r *http.Request)
	// Get all tasks
	// (GET /tasks)
	GetTasks(w http.ResponseWriter, r *http.Request)
	// Run tasks
	// (POST /tasks/run)
	RunTask(w http.ResponseWriter, r *http.Request)
	// Get transactions info
	// (GET /transactions/info)
	GetTransactionsInfo(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetJobs operation middleware
func (siw *ServerInterfaceWrapper) GetJobs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJobs(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetJobById operation middleware
func (siw *ServerInterfaceWrapper) GetJobById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJobById(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RunJobById operation middleware
func (siw *ServerInterfaceWrapper) RunJobById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RunJobById(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// StopJobById operation middleware
func (siw *ServerInterfaceWrapper) StopJobById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StopJobById(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetOrders operation middleware
func (siw *ServerInterfaceWrapper) GetOrders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrdersParams

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------

	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Required query parameter "date" -------------

	if paramValue := r.URL.Query().Get("date"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "date"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "date", r.URL.Query(), &params.Date)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "date", Err: err})
		return
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrders(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Ping operation middleware
func (siw *ServerInterfaceWrapper) Ping(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Ping(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetRooms operation middleware
func (siw *ServerInterfaceWrapper) GetRooms(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRooms(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateRoom operation middleware
func (siw *ServerInterfaceWrapper) CreateRoom(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRoom(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateRoom operation middleware
func (siw *ServerInterfaceWrapper) UpdateRoom(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateRoom(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetRoomById operation middleware
func (siw *ServerInterfaceWrapper) GetRoomById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameter("simple", false, "code", mux.Vars(r)["code"], &code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRoomById(w, r, code)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSalesForWeek operation middleware
func (siw *ServerInterfaceWrapper) GetSalesForWeek(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSalesForWeek(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetStocks operation middleware
func (siw *ServerInterfaceWrapper) GetStocks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStocksParams

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------

	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Required query parameter "date" -------------

	if paramValue := r.URL.Query().Get("date"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "date"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "date", r.URL.Query(), &params.Date)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "date", Err: err})
		return
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStocks(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetStocksInfo operation middleware
func (siw *ServerInterfaceWrapper) GetStocksInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStocksInfo(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTasks operation middleware
func (siw *ServerInterfaceWrapper) GetTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTasks(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RunTask operation middleware
func (siw *ServerInterfaceWrapper) RunTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RunTask(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTransactionsInfo operation middleware
func (siw *ServerInterfaceWrapper) GetTransactionsInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTransactionsInfo(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/jobs", wrapper.GetJobs).Methods("GET")

	r.HandleFunc(options.BaseURL+"/jobs/{id}", wrapper.GetJobById).Methods("GET")

	r.HandleFunc(options.BaseURL+"/jobs/{id}/run", wrapper.RunJobById).Methods("POST")

	r.HandleFunc(options.BaseURL+"/jobs/{id}/stop", wrapper.StopJobById).Methods("POST")

	r.HandleFunc(options.BaseURL+"/orders", wrapper.GetOrders).Methods("GET")

	r.HandleFunc(options.BaseURL+"/ping", wrapper.Ping).Methods("GET")

	r.HandleFunc(options.BaseURL+"/rooms", wrapper.GetRooms).Methods("GET")

	r.HandleFunc(options.BaseURL+"/rooms", wrapper.CreateRoom).Methods("POST")

	r.HandleFunc(options.BaseURL+"/rooms", wrapper.UpdateRoom).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/rooms/{code}", wrapper.GetRoomById).Methods("GET")

	r.HandleFunc(options.BaseURL+"/sales/week", wrapper.GetSalesForWeek).Methods("GET")

	r.HandleFunc(options.BaseURL+"/stocks", wrapper.GetStocks).Methods("GET")

	r.HandleFunc(options.BaseURL+"/stocks/info", wrapper.GetStocksInfo).Methods("GET")

	r.HandleFunc(options.BaseURL+"/tasks", wrapper.GetTasks).Methods("GET")

	r.HandleFunc(options.BaseURL+"/tasks/run", wrapper.RunTask).Methods("POST")

	r.HandleFunc(options.BaseURL+"/transactions/info", wrapper.GetTransactionsInfo).Methods("GET")

	return r
}
