// Package wbclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package wbclient

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	HeaderApiKeyScopes = "HeaderApiKey.Scopes"
)

// StocksItem defines model for StocksItem.
type StocksItem struct {
	// Discount Скидка
	Discount *float32 `json:"Discount,omitempty"`

	// Price Цена
	Price *float32 `json:"Price,omitempty"`

	// SCCode Код контракта
	SCCode *string `json:"SCCode,omitempty"`

	// Barcode Бар-код
	Barcode *string `json:"barcode,omitempty"`

	// Brand Бренд
	Brand *string `json:"brand,omitempty"`

	// Category Категория
	Category *string `json:"category,omitempty"`

	// DaysOnSite Количество дней на сайте
	DaysOnSite *int `json:"daysOnSite,omitempty"`

	// IsRealization Договор реализации
	IsRealization *bool `json:"isRealization,omitempty"`

	// IsSupply Договор поставки
	IsSupply *bool `json:"isSupply,omitempty"`

	// LastChangeDate Дата и время обновления информации в сервисе. Это поле соответствует параметру `dateFrom` в запросе. Если часовой пояс не указан, то берется Московское время UTC+3.
	LastChangeDate *string `json:"lastChangeDate,omitempty"`

	// NmId Код WB
	NmId *int `json:"nmId,omitempty"`

	// Quantity Количество, доступное для продажи (сколько можно добавить в корзину)
	Quantity *int `json:"quantity,omitempty"`

	// QuantityFull Полное (непроданное) количество, которое числится за складом (= `quantity` + в пути)
	QuantityFull *int `json:"quantityFull,omitempty"`

	// Subject Предмет
	Subject *string `json:"subject,omitempty"`

	// SupplierArticle Артикул поставщика
	SupplierArticle *string `json:"supplierArticle,omitempty"`

	// TechSize Размер
	TechSize *string `json:"techSize,omitempty"`

	// WarehouseName Название склада
	WarehouseName *string `json:"warehouseName,omitempty"`
}

// DateFrom defines model for dateFrom.
type DateFrom = openapi_types.Date

// GetSupplierStocksParams defines parameters for GetSupplierStocks.
type GetSupplierStocksParams struct {
	// DateFrom Дата в формате RFC3339. Можно передать дату или дату со временем.  Время можно указывать с точностью до секунд или миллисекунд.  Литера `Z` в конце строки означает, что время передается в UTC-часовом поясе.  При ее отсутствии время считается в часовом поясе МСК (UTC+3). <br>Примеры: <ul> <li> `2019-06-20` <li> `2019-06-20T00:00:00Z` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345Z` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul>
	DateFrom DateFrom `form:"dateFrom" json:"dateFrom"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetSupplierStocks request
	GetSupplierStocks(ctx context.Context, params *GetSupplierStocksParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetSupplierStocks(ctx context.Context, params *GetSupplierStocksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSupplierStocksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetSupplierStocksRequest generates requests for GetSupplierStocks
func NewGetSupplierStocksRequest(server string, params *GetSupplierStocksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/supplier/stocks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateFrom", runtime.ParamLocationQuery, params.DateFrom); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetSupplierStocks request
	GetSupplierStocksWithResponse(ctx context.Context, params *GetSupplierStocksParams, reqEditors ...RequestEditorFn) (*GetSupplierStocksResponse, error)
}

type GetSupplierStocksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]StocksItem
}

// Status returns HTTPResponse.Status
func (r GetSupplierStocksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSupplierStocksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetSupplierStocksWithResponse request returning *GetSupplierStocksResponse
func (c *ClientWithResponses) GetSupplierStocksWithResponse(ctx context.Context, params *GetSupplierStocksParams, reqEditors ...RequestEditorFn) (*GetSupplierStocksResponse, error) {
	rsp, err := c.GetSupplierStocks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSupplierStocksResponse(rsp)
}

// ParseGetSupplierStocksResponse parses an HTTP response from a GetSupplierStocksWithResponse call
func ParseGetSupplierStocksResponse(rsp *http.Response) (*GetSupplierStocksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSupplierStocksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []StocksItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
